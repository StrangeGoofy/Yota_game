// src/js/views/UIOverlay.js
export default class UIOverlay {
	/**
	 * @param {Object} options ‚Äì –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –ø—Ä–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	 */
	constructor(options = {}) {
		// –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –∫–ª–∞—Å—Å–æ–º "ui", —Å–æ–∑–¥–∞—ë–º –µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ body
		this.container = document.querySelector('.ui');
		if (!this.container) {
			this.container = document.createElement('div');
			this.container.classList.add('ui');
			document.body.appendChild(this.container);
		}
		this.options = options;
		this.createUIElements();
		this.attachEvents();
	}

	createUIElements() {
		// –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π div –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–∞—Ö, –∫–æ–ª–æ–¥–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ö–æ–¥–∞
		/*–ë–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø—Ä–æ –∏–≥—Ä–æ–∫–æ–≤*/
		this.infoDiv = document.createElement('div');
		this.infoDiv.classList.add('info');
		document.body.appendChild(this.infoDiv);

		/*–ë–ª–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π*/
		this.gameButtons = document.createElement('div');
		this.gameButtons.classList.add('game-buttons');

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
		this.finishTurnButton = document.createElement('button');
		this.finishTurnButton.id = 'finishTurnButton';
		this.finishTurnButton.classList.add('hidden');
		this.finishTurnButton.textContent = '–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ö–æ–¥';
		this.gameButtons.appendChild(this.finishTurnButton);

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
		this.undoButton = document.createElement('button');
		this.undoButton.id = 'undoButton';
		this.undoButton.classList.add('hidden');
		this.undoButton.textContent = '–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ';
		this.gameButtons.appendChild(this.undoButton);

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç
		this.swapCardsButton = document.createElement('button');
		this.swapCardsButton.id = 'swapCards';
		this.swapCardsButton.classList.add('hidden');
		this.swapCardsButton.textContent = '–ü–æ–º–µ–Ω—è—Ç—å –∫–∞—Ä—Ç—ã';
		this.gameButtons.appendChild(this.swapCardsButton);

		/*–ë–ª–æ–∫ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫*/
		this.utilButtons = document.createElement('div');
		this.utilButtons.classList.add('util-buttons');

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
		this.ruleButton = document.createElement('button');
		this.ruleButton.id = 'ruleButton';
		this.ruleButton.classList.add('hidden');
		this.ruleButton.textContent = '–ü—Ä–∞–≤–∏–ª–∞';
		this.utilButtons.appendChild(this.ruleButton);

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–æ–±–±–∏
		this.exitButton = document.createElement('button');
		this.exitButton.id = 'exitButton';
		this.exitButton.classList.add('hidden');
		this.exitButton.textContent = '–í—ã–π—Ç–∏';
		this.utilButtons.appendChild(this.exitButton);

		document.body.appendChild(this.gameButtons);
		document.body.appendChild(this.utilButtons);

	}

	attachEvents() {
		this.finishTurnButton.addEventListener('click', () => {
			if (this.options.onEndTurn) {
				this.options.onEndTurn();
			}
		});
		this.undoButton.addEventListener('click', () => {
			if (this.options.onUndo) {
				this.options.onUndo();
			}
		});
		this.swapCardsButton.addEventListener('click', () => {
			if (this.options.onSwap) {
				this.options.onSwap();
			}
		});
		this.ruleButton.addEventListener('click', () => {
			if (this.options.onOpenRule) {
				this.options.onOpenRule();
			}
		});
		this.exitButton.addEventListener('click', () => {
			if (this.options.onExit) {
				this.options.onExit();
			}
		});
		const closeRuleModalButton = document.getElementById('closeRuleModal');
		if (closeRuleModalButton) {
			closeRuleModalButton.addEventListener('click', () => {
				const ruleModal = document.getElementById('rule_modal');
				if (ruleModal) {
					ruleModal.classList.add('hidden');
				}
			});
		}
	}

	/**
	 * –û–±–Ω–æ–≤–ª—è–µ—Ç UI –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
	 * @param {Object} gameState - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ players, player_id, deck_cards_count, time –∏ —Ç.–¥.
	 */
	render(gameState) {
		if (gameState.lobby_state === "NotReady") {
			let html = `<div class="game-wait screen">`;
			html += `<div class="state-title">–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤</div>`;
			let currentIndex = gameState.players.findIndex((p) => p.id === gameState.player_id);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ gameState.players - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç
			if (Array.isArray(gameState.players) && gameState.players.length > 0) {
				for (let i = 0; i < gameState.players.length; i++) {  // –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞ 0
					const idx = (currentIndex + i) % gameState.players.length; // –ï—Å–ª–∏ currentIndex –Ω—É–∂–µ–Ω
					const player = gameState.players[idx];
					html += `<div class="player-info-state">
						${player.nickname}: ${player.state}
					</div>`;
				}
			} else {
				html += `<div class="error-message">–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏</div>`;
			}

			html += `</div>`;
			const exitBtn = document.createElement('button');
			exitBtn.textContent = '–í—ã–π—Ç–∏';
			exitBtn.classList.add('exitButton');

			// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
			exitBtn.addEventListener('click', () => {
				if (this.options.onExit) {
					this.options.onExit();
				}
			});

			this.infoDiv.innerHTML = html;
			this.infoDiv.querySelector('.screen').appendChild(exitBtn);
		} else if (gameState.lobby_state === "Gaming") {
			this.finishTurnButton.classList.remove("hidden");
			this.undoButton.classList.remove("hidden");
			this.swapCardsButton.classList.remove("hidden");

			this.ruleButton.classList.remove("hidden");
			this.exitButton.classList.remove("hidden");

			let html = `<div class="game-info">`;
			// 1) –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (–ø–æ player_id)
			const currentPlayer = gameState.players.find((p) => p.id === gameState.player_id);
			const turnPlayer = gameState.players.find((p) => p.id === gameState.current_turn_id);
			if (currentPlayer) {
				html += `<div class="current-player">
                <strong>–í—ã:</strong> ${currentPlayer.nickname} 
                <strong>–æ—á–∫–∏:</strong> ${currentPlayer.score}
								<br/>
              </div>`;
			}
			html += `<strong>–•–æ–¥</strong>: ${turnPlayer.nickname}`;
			// 2) –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ (–ø–æ –∫—Ä—É–≥—É)
			html += `<div class="other-players"><strong>–ò–≥—Ä–æ–∫–∏</strong>:<br/>`;
			let currentIndex = gameState.players.findIndex((p) => p.id === gameState.player_id);
			for (let i = 1; i < gameState.players.length; i++) {
				const idx = (currentIndex + i) % gameState.players.length;
				const player = gameState.players[idx];
				html += `<div class="player-info">
                ${player.nickname}, score: ${player.score} 
                <div class="cards">`;
				// –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª—å–∫–æ –∏–∫–æ–Ω–æ–∫, —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç (cards_count)
				for (let j = 0; j < player.cards_count; j++) {
					html += `<span class="card-icon">üÇ†</span>`;
				}
				html += `   </div>
              </div>`;
			}
			html += `</div>`;
			// 3) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ
			html += `<div class="deck-info">–ö–æ–ª–æ–¥–∞: ${gameState.deck_cards_count} –∫–∞—Ä—Ç</div>`;
			// 4) –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ö–æ–¥–∞
			html += `<div class="turn-time">–í—Ä–µ–º—è —Ö–æ–¥–∞: ${gameState.time}</div>`;
			html += `</div>`;

			this.infoDiv.innerHTML = html;
		} else if (gameState.lobby_state === "EndGame") {
			this.finishTurnButton.classList.add("hidden");
			this.undoButton.classList.add("hidden");
			this.swapCardsButton.classList.add("hidden");
			this.ruleButton.classList.add("hidden");
			this.exitButton.remove();

			let html = `<div class="game-end screen">`;
			html += `<div class="state-title">–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞</div>`;
			let currentIndex = gameState.players.findIndex((p) => p.id === gameState.player_id);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ gameState.players - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç
			if (Array.isArray(gameState.players) && gameState.players.length > 0) {
				const sortedPlayers = [...gameState.players].sort((a, b) => b.score - a.score);
				for (const player of sortedPlayers) {
					html += `<div class="player-info-state">
						<strong>${player.nickname}</strong>: ${player.score}
					</div>`;
				}
				html += `</div>`;

				const exitBtn = document.createElement('button');
				exitBtn.textContent = '–í—ã–π—Ç–∏';
				exitBtn.classList.add('exitButton');

				// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
				exitBtn.addEventListener('click', () => {
					if (this.options.onExit) {
						this.options.onExit();
					}
				});

				this.infoDiv.innerHTML = html;
				this.infoDiv.querySelector('.screen').appendChild(exitBtn);
			}
		}
	}
}
